import fs from 'fs/promises';\nimport path from 'path';\nimport { PrismaClient } from '@prisma/client';\n\ninterface MemoryEntry {\n  id: string;\n  key: string;\n  value: any;\n  type: string;\n  namespace: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface ClaudeFlowMemory {\n  entries: MemoryEntry[];\n  metadata: {\n    version: string;\n    lastUpdate: string;\n    totalEntries: number;\n  };\n}\n\nexport class MemoryBridge {\n  private prisma: PrismaClient;\n  private memoryPath: string;\n  private systemStatusPath: string;\n\n  constructor(prisma: PrismaClient, memoryPath?: string, systemStatusPath?: string) {\n    this.prisma = prisma;\n    this.memoryPath = memoryPath || path.join(process.cwd(), '../memory/data/entries.json');\n    this.systemStatusPath = systemStatusPath || path.join(process.cwd(), '../memory/update_system_status.json');\n  }\n\n  // Sync memory entries from Claude-Flow to dashboard database\n  async syncMemoryFromClaudeFlow(): Promise<void> {\n    try {\n      const memoryData = await this.readClaudeFlowMemory();\n      \n      for (const entry of memoryData.entries) {\n        await this.prisma.memoryEntry.upsert({\n          where: { key: entry.key },\n          update: {\n            value: entry.value,\n            type: entry.type,\n            namespace: entry.namespace,\n            updatedAt: new Date(entry.updated_at)\n          },\n          create: {\n            key: entry.key,\n            value: entry.value,\n            type: entry.type,\n            namespace: entry.namespace,\n            createdAt: new Date(entry.created_at),\n            updatedAt: new Date(entry.updated_at)\n          }\n        });\n      }\n      \n      console.log(`✅ Synced ${memoryData.entries.length} memory entries from Claude-Flow`);\n    } catch (error) {\n      console.error('❌ Error syncing memory from Claude-Flow:', error);\n    }\n  }\n\n  // Sync memory entries from dashboard database to Claude-Flow\n  async syncMemoryToClaudeFlow(): Promise<void> {\n    try {\n      const memoryEntries = await this.prisma.memoryEntry.findMany();\n      \n      const claudeFlowMemory: ClaudeFlowMemory = {\n        entries: memoryEntries.map(entry => ({\n          id: entry.id,\n          key: entry.key,\n          value: entry.value,\n          type: entry.type,\n          namespace: entry.namespace,\n          created_at: entry.createdAt.toISOString(),\n          updated_at: entry.updatedAt.toISOString()\n        })),\n        metadata: {\n          version: '1.0.0',\n          lastUpdate: new Date().toISOString(),\n          totalEntries: memoryEntries.length\n        }\n      };\n      \n      await this.writeClaudeFlowMemory(claudeFlowMemory);\n      console.log(`✅ Synced ${memoryEntries.length} memory entries to Claude-Flow`);\n    } catch (error) {\n      console.error('❌ Error syncing memory to Claude-Flow:', error);\n    }\n  }\n\n  // Get system status from Claude-Flow\n  async getSystemStatus(): Promise<any> {\n    try {\n      const statusData = await fs.readFile(this.systemStatusPath, 'utf-8');\n      return JSON.parse(statusData);\n    } catch (error) {\n      console.error('❌ Error reading system status:', error);\n      return null;\n    }\n  }\n\n  // Update system status for Claude-Flow\n  async updateSystemStatus(status: any): Promise<void> {\n    try {\n      const updatedStatus = {\n        ...status,\n        lastUpdate: new Date().toISOString(),\n        dashboardActive: true\n      };\n      \n      await fs.writeFile(this.systemStatusPath, JSON.stringify(updatedStatus, null, 2));\n      console.log('✅ Updated system status for Claude-Flow');\n    } catch (error) {\n      console.error('❌ Error updating system status:', error);\n    }\n  }\n\n  // Start periodic sync\n  startPeriodicSync(intervalMinutes: number = 5): NodeJS.Timeout {\n    const interval = intervalMinutes * 60 * 1000;\n    \n    return setInterval(async () => {\n      await this.syncMemoryFromClaudeFlow();\n      \n      // Update system status with dashboard health\n      const systemStatus = await this.getSystemStatus() || {};\n      await this.updateSystemStatus({\n        ...systemStatus,\n        dashboard: {\n          status: 'active',\n          lastSync: new Date().toISOString(),\n          memoryEntriesCount: await this.prisma.memoryEntry.count(),\n          agentsCount: await this.prisma.agent.count(),\n          tasksCount: await this.prisma.task.count()\n        }\n      });\n    }, interval);\n  }\n\n  private async readClaudeFlowMemory(): Promise<ClaudeFlowMemory> {\n    const data = await fs.readFile(this.memoryPath, 'utf-8');\n    return JSON.parse(data);\n  }\n\n  private async writeClaudeFlowMemory(memory: ClaudeFlowMemory): Promise<void> {\n    await fs.writeFile(this.memoryPath, JSON.stringify(memory, null, 2));\n  }\n}"}