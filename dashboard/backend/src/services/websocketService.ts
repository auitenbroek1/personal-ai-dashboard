import { Server, Socket } from 'socket.io';\n\nexport class WebSocketService {\n  private io: Server;\n  private connectedClients: Set<string> = new Set();\n\n  constructor(io: Server) {\n    this.io = io;\n  }\n\n  handleConnection(socket: Socket) {\n    this.connectedClients.add(socket.id);\n    \n    // Send initial connection acknowledgment\n    socket.emit('system_status_update', {\n      type: 'connection_established',\n      timestamp: new Date(),\n      clientCount: this.connectedClients.size\n    });\n\n    // Handle client subscriptions\n    socket.on('subscribe_to_updates', (data) => {\n      console.log(`Client ${socket.id} subscribed to updates:`, data);\n      // Join rooms based on subscription preferences\n      if (data.agents) socket.join('agents');\n      if (data.tasks) socket.join('tasks');\n      if (data.metrics) socket.join('metrics');\n      if (data.alerts) socket.join('alerts');\n    });\n\n    // Handle agent commands\n    socket.on('agent_command', (data) => {\n      console.log(`Agent command received from ${socket.id}:`, data);\n      // Broadcast to relevant clients\n      socket.broadcast.to('agents').emit('agent_status_change', {\n        type: 'command_received',\n        data,\n        timestamp: new Date()\n      });\n    });\n\n    // Handle task updates\n    socket.on('task_update', (data) => {\n      console.log(`Task update received from ${socket.id}:`, data);\n      socket.broadcast.to('tasks').emit('task_progress_update', {\n        type: 'task_updated',\n        data,\n        timestamp: new Date()\n      });\n    });\n  }\n\n  handleDisconnection(socket: Socket) {\n    this.connectedClients.delete(socket.id);\n  }\n\n  // Broadcast system status updates\n  broadcastSystemUpdate(data: any) {\n    this.io.emit('system_status_update', {\n      ...data,\n      timestamp: new Date()\n    });\n  }\n\n  // Broadcast agent status changes\n  broadcastAgentUpdate(data: any) {\n    this.io.to('agents').emit('agent_status_change', {\n      ...data,\n      timestamp: new Date()\n    });\n  }\n\n  // Broadcast task progress updates\n  broadcastTaskUpdate(data: any) {\n    this.io.to('tasks').emit('task_progress_update', {\n      ...data,\n      timestamp: new Date()\n    });\n  }\n\n  // Broadcast metric updates\n  broadcastMetricUpdate(data: any) {\n    this.io.to('metrics').emit('metric_update', {\n      ...data,\n      timestamp: new Date()\n    });\n  }\n\n  // Broadcast alerts\n  broadcastAlert(data: any) {\n    this.io.emit('alert_notification', {\n      ...data,\n      timestamp: new Date()\n    });\n  }\n\n  getConnectedClientsCount(): number {\n    return this.connectedClients.size;\n  }\n}"}