import { Router } from 'express';\nimport { Request, Response, NextFunction } from 'express';\nimport { createError } from '../middleware/errorHandler';\n\nconst router = Router();\n\n// Get system metrics\nrouter.get('/metrics', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { prisma } = req;\n    const { type, hours = 24 } = req.query;\n    \n    const since = new Date();\n    since.setHours(since.getHours() - Number(hours));\n    \n    const where: any = {\n      timestamp: {\n        gte: since\n      }\n    };\n    \n    if (type) where.metricType = type;\n    \n    const metrics = await prisma.systemMetric.findMany({\n      where,\n      orderBy: { timestamp: 'desc' }\n    });\n    \n    res.json({\n      success: true,\n      data: metrics\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Get alerts\nrouter.get('/alerts', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { prisma } = req;\n    const { acknowledged = false } = req.query;\n    \n    const alerts = await prisma.alert.findMany({\n      where: {\n        acknowledged: acknowledged === 'true'\n      },\n      orderBy: { timestamp: 'desc' }\n    });\n    \n    res.json({\n      success: true,\n      data: alerts\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Acknowledge alert\nrouter.put('/alerts/:id/acknowledge', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { prisma, wsService } = req;\n    const { id } = req.params;\n    \n    const alert = await prisma.alert.update({\n      where: { id },\n      data: { acknowledged: true }\n    });\n    \n    // Broadcast alert acknowledgment\n    wsService.broadcastAlert({\n      type: 'alert_acknowledged',\n      alert\n    });\n    \n    res.json({\n      success: true,\n      data: alert\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// System health check\nrouter.get('/health', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { prisma } = req;\n    \n    // Get system health indicators\n    const [agentCount, activeAgents, pendingTasks, recentErrors] = await Promise.all([\n      prisma.agent.count(),\n      prisma.agent.count({ where: { status: { in: ['active', 'busy'] } } }),\n      prisma.task.count({ where: { status: 'pending' } }),\n      prisma.alert.count({ \n        where: { \n          severity: 'error',\n          timestamp: {\n            gte: new Date(Date.now() - 60 * 60 * 1000) // Last hour\n          }\n        } \n      })\n    ]);\n    \n    const healthScore = calculateHealthScore({\n      agentCount,\n      activeAgents,\n      pendingTasks,\n      recentErrors\n    });\n    \n    res.json({\n      success: true,\n      data: {\n        healthScore,\n        status: healthScore > 0.8 ? 'healthy' : healthScore > 0.5 ? 'warning' : 'critical',\n        metrics: {\n          totalAgents: agentCount,\n          activeAgents,\n          pendingTasks,\n          recentErrors\n        },\n        timestamp: new Date()\n      }\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Helper function to calculate health score\nfunction calculateHealthScore(metrics: {\n  agentCount: number;\n  activeAgents: number;\n  pendingTasks: number;\n  recentErrors: number;\n}): number {\n  let score = 1.0;\n  \n  // Reduce score based on inactive agents\n  if (metrics.agentCount > 0) {\n    const agentActivityRatio = metrics.activeAgents / metrics.agentCount;\n    score *= agentActivityRatio;\n  }\n  \n  // Reduce score based on pending tasks\n  if (metrics.pendingTasks > 10) {\n    score *= Math.max(0.5, 1 - (metrics.pendingTasks - 10) * 0.05);\n  }\n  \n  // Reduce score based on recent errors\n  if (metrics.recentErrors > 0) {\n    score *= Math.max(0.3, 1 - metrics.recentErrors * 0.1);\n  }\n  \n  return Math.max(0, Math.min(1, score));\n}\n\nexport default router;"}