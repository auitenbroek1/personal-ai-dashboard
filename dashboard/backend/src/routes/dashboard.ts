import { Router } from 'express';\nimport { Request, Response, NextFunction } from 'express';\nimport { createError } from '../middleware/errorHandler';\n\nconst router = Router();\n\n// Dashboard overview endpoint\nrouter.get('/overview', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { prisma } = req;\n    \n    // Get summary statistics\n    const [agentCount, taskCount, metricCount, alertCount] = await Promise.all([\n      prisma.agent.count(),\n      prisma.task.count(),\n      prisma.systemMetric.count(),\n      prisma.alert.count({ where: { acknowledged: false } })\n    ]);\n    \n    const activeAgents = await prisma.agent.count({\n      where: { status: { in: ['active', 'busy'] } }\n    });\n    \n    const activeTasks = await prisma.task.count({\n      where: { status: 'in_progress' }\n    });\n    \n    // Get recent metrics\n    const recentMetrics = await prisma.systemMetric.findMany({\n      take: 10,\n      orderBy: { timestamp: 'desc' }\n    });\n    \n    res.json({\n      success: true,\n      data: {\n        summary: {\n          totalAgents: agentCount,\n          activeAgents,\n          totalTasks: taskCount,\n          activeTasks,\n          totalMetrics: metricCount,\n          activeAlerts: alertCount\n        },\n        recentMetrics,\n        lastUpdate: new Date()\n      }\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// System health endpoint\nrouter.get('/health', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { prisma, wsService } = req;\n    \n    // Check database connection\n    await prisma.$queryRaw`SELECT 1`;\n    \n    const health = {\n      database: 'healthy',\n      websocket: 'healthy',\n      connectedClients: wsService.getConnectedClientsCount(),\n      timestamp: new Date(),\n      uptime: process.uptime()\n    };\n    \n    res.json({\n      success: true,\n      data: health\n    });\n  } catch (error) {\n    next(createError('Health check failed', 503));\n  }\n});\n\nexport default router;"}