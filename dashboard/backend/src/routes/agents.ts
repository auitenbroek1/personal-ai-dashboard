import { Router } from 'express';\nimport { Request, Response, NextFunction } from 'express';\nimport { createError } from '../middleware/errorHandler';\n\nconst router = Router();\n\n// Get all agents\nrouter.get('/', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { prisma } = req;\n    const agents = await prisma.agent.findMany({\n      include: {\n        tasks: {\n          take: 5,\n          orderBy: { createdAt: 'desc' }\n        }\n      }\n    });\n    \n    res.json({\n      success: true,\n      data: agents\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Get agent by ID\nrouter.get('/:id', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { prisma } = req;\n    const { id } = req.params;\n    \n    const agent = await prisma.agent.findUnique({\n      where: { id },\n      include: {\n        tasks: {\n          orderBy: { createdAt: 'desc' }\n        }\n      }\n    });\n    \n    if (!agent) {\n      throw createError('Agent not found', 404);\n    }\n    \n    res.json({\n      success: true,\n      data: agent\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Create new agent\nrouter.post('/', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { prisma, wsService } = req;\n    const { name, type, config = {} } = req.body;\n    \n    if (!name || !type) {\n      throw createError('Name and type are required', 400);\n    }\n    \n    const agent = await prisma.agent.create({\n      data: {\n        name,\n        type,\n        status: 'idle',\n        config\n      }\n    });\n    \n    // Broadcast agent creation\n    wsService.broadcastAgentUpdate({\n      type: 'agent_created',\n      agent\n    });\n    \n    res.status(201).json({\n      success: true,\n      data: agent\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Update agent\nrouter.put('/:id', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { prisma, wsService } = req;\n    const { id } = req.params;\n    const updateData = req.body;\n    \n    const agent = await prisma.agent.update({\n      where: { id },\n      data: {\n        ...updateData,\n        updatedAt: new Date()\n      }\n    });\n    \n    // Broadcast agent update\n    wsService.broadcastAgentUpdate({\n      type: 'agent_updated',\n      agent\n    });\n    \n    res.json({\n      success: true,\n      data: agent\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Delete agent\nrouter.delete('/:id', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { prisma, wsService } = req;\n    const { id } = req.params;\n    \n    await prisma.agent.delete({\n      where: { id }\n    });\n    \n    // Broadcast agent deletion\n    wsService.broadcastAgentUpdate({\n      type: 'agent_deleted',\n      agentId: id\n    });\n    \n    res.json({\n      success: true,\n      message: 'Agent deleted successfully'\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default router;"}