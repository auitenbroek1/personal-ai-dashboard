import { Router } from 'express';\nimport { Request, Response, NextFunction } from 'express';\nimport { createError } from '../middleware/errorHandler';\n\nconst router = Router();\n\n// Get all tasks\nrouter.get('/', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { prisma } = req;\n    const { page = 1, limit = 20, status, agentId } = req.query;\n    \n    const skip = (Number(page) - 1) * Number(limit);\n    const where: any = {};\n    \n    if (status) where.status = status;\n    if (agentId) where.agentId = agentId;\n    \n    const [tasks, total] = await Promise.all([\n      prisma.task.findMany({\n        where,\n        skip,\n        take: Number(limit),\n        include: {\n          agent: true\n        },\n        orderBy: { createdAt: 'desc' }\n      }),\n      prisma.task.count({ where })\n    ]);\n    \n    res.json({\n      success: true,\n      data: tasks,\n      pagination: {\n        page: Number(page),\n        limit: Number(limit),\n        total,\n        totalPages: Math.ceil(total / Number(limit))\n      }\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Create new task\nrouter.post('/', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { prisma, wsService } = req;\n    const { agentId, title, description, priority = 'medium' } = req.body;\n    \n    if (!agentId || !title) {\n      throw createError('Agent ID and title are required', 400);\n    }\n    \n    // Verify agent exists\n    const agent = await prisma.agent.findUnique({ where: { id: agentId } });\n    if (!agent) {\n      throw createError('Agent not found', 404);\n    }\n    \n    const task = await prisma.task.create({\n      data: {\n        agentId,\n        title,\n        description,\n        priority,\n        status: 'pending'\n      },\n      include: {\n        agent: true\n      }\n    });\n    \n    // Broadcast task creation\n    wsService.broadcastTaskUpdate({\n      type: 'task_created',\n      task\n    });\n    \n    res.status(201).json({\n      success: true,\n      data: task\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Update task\nrouter.put('/:id', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { prisma, wsService } = req;\n    const { id } = req.params;\n    const updateData = req.body;\n    \n    // Handle status transitions\n    if (updateData.status === 'in_progress' && !updateData.startedAt) {\n      updateData.startedAt = new Date();\n    }\n    \n    if (updateData.status === 'completed' && !updateData.completedAt) {\n      updateData.completedAt = new Date();\n    }\n    \n    const task = await prisma.task.update({\n      where: { id },\n      data: updateData,\n      include: {\n        agent: true\n      }\n    });\n    \n    // Broadcast task update\n    wsService.broadcastTaskUpdate({\n      type: 'task_updated',\n      task\n    });\n    \n    res.json({\n      success: true,\n      data: task\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Delete task\nrouter.delete('/:id', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { prisma, wsService } = req;\n    const { id } = req.params;\n    \n    await prisma.task.delete({\n      where: { id }\n    });\n    \n    // Broadcast task deletion\n    wsService.broadcastTaskUpdate({\n      type: 'task_deleted',\n      taskId: id\n    });\n    \n    res.json({\n      success: true,\n      message: 'Task deleted successfully'\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default router;"}