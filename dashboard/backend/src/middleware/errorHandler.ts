import { Request, Response, NextFunction } from 'express';\n\nexport interface AppError extends Error {\n  statusCode?: number;\n  isOperational?: boolean;\n}\n\nexport const errorHandler = (\n  err: AppError,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  const statusCode = err.statusCode || 500;\n  const message = err.message || 'Internal Server Error';\n\n  console.error('Error:', {\n    message: err.message,\n    stack: err.stack,\n    url: req.url,\n    method: req.method,\n    timestamp: new Date().toISOString()\n  });\n\n  res.status(statusCode).json({\n    success: false,\n    error: message,\n    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })\n  });\n};\n\nexport const createError = (message: string, statusCode: number = 500): AppError => {\n  const error = new Error(message) as AppError;\n  error.statusCode = statusCode;\n  error.isOperational = true;\n  return error;\n};"}