import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\nimport { createError } from './errorHandler';\n\nexport interface AuthRequest extends Request {\n  user?: {\n    id: string;\n    email: string;\n    role: string;\n  };\n}\n\nexport const authMiddleware = (\n  req: AuthRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const token = req.header('Authorization')?.replace('Bearer ', '');\n    \n    if (!token) {\n      throw createError('Access denied. No token provided.', 401);\n    }\n\n    const jwtSecret = process.env.JWT_SECRET;\n    if (!jwtSecret) {\n      throw createError('JWT secret not configured', 500);\n    }\n\n    const decoded = jwt.verify(token, jwtSecret) as any;\n    req.user = decoded;\n    next();\n  } catch (error) {\n    if (error instanceof jwt.JsonWebTokenError) {\n      next(createError('Invalid token', 401));\n    } else {\n      next(error);\n    }\n  }\n};\n\nexport const requireRole = (roles: string[]) => {\n  return (req: AuthRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return next(createError('User not authenticated', 401));\n    }\n\n    if (!roles.includes(req.user.role)) {\n      return next(createError('Insufficient permissions', 403));\n    }\n\n    next();\n  };\n};"}